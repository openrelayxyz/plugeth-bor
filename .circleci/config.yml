orbs:
  aws-cli: circleci/aws-cli@1.0.0 #See: https://circleci.com/orbs/registry/orb/circleci/aws-cli


version: 2.1
jobs:
  test:
    docker:
      - image: cimg/go:1.22.0
    steps:
      - checkout
      - run:
          name: Prep env
          command: |
            mkdir -p /home/circleci/go/src
            mkdir artifacts
            go mod tidy
      - run:
          name: test rpc
          command: go test ./rpc/
      - run:
          name: test eth
          command: go test ./eth/
      - run:
          name: test eth/tracers
          command: go test ./eth/tracers/
      - run:
          name: test core
          command: go test ./core/
      - run:
          name: test core/vm
          command: go test ./core/vm/
      - run:
          name: test core/state
          command: go test ./core/state/
      - run:
          name: test core/rawdb
          command: go test ./core/rawdb/
  build_geth_push:
    docker: # run the steps with Docker
      - image: cimg/go:1.22.0 # ...with this image as the primary container
      # this is where all `steps` will run
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Prep env
          command: |
            mkdir -p /home/circleci/go/src
            mkdir artifacts
            go mod tidy
      - run:
          name: build geth binaries
          command: |
            sudo apt update
            sudo apt install gcc-aarch64-linux-gnu libc6-dev-arm64-cross wget -y
            export GOPATH=$HOME/go
            export GOARCH=amd64
            go build -o ./artifacts/bor-linux-amd64-${CIRCLE_TAG} ./cmd/cli
            CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOARCH=arm64  go build -o ./artifacts/bor-linux-arm64-${CIRCLE_TAG} ./cmd/cli
      - run:
          name: "Publish Release on GitHub"
          command: |
            go install github.com/tcnksm/ghr@v0.14.0
            NAME=plugeth2-${CIRCLE_TAG}
            VERSION=${CIRCLE_TAG}
            ghr  -draft -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -name $NAME -delete ${VERSION} ./artifacts/
      - aws-cli/setup: #See: https://circleci.com/orbs/registry/orb/circleci/aws-cli
          aws-access-key-id: ACCESS_KEY
          aws-secret-access-key: SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - run:
          name: push to s3
          command: |
            aws s3 cp ./artifacts/bor-linux-amd64-${CIRCLE_TAG} s3://ethercattle-binaries/plugeth2/$CIRCLE_TAG/bor-linux-amd64 --acl=public-read
            aws s3 cp ./artifacts/bor-linux-arm64-${CIRCLE_TAG} s3://ethercattle-binaries/plugeth2/$CIRCLE_TAG/bor-linux-arm64 --acl=public-read
      - run:
          name: Message Slack
          command: |
              ./slack-post.sh -w $SLACK_WEBHOOK -m "*plugeth-bor2*:\nTag: $CIRCLE_TAG \n"

  trigger-xplugeth-manifest:
    docker: # run the steps with Docker
      - image: cimg/go:1.22.0 # ...with this image as the primary container
      # this is where all `steps` will run
    steps:
      - checkout
      - run:
          name: Prep paramters and the curl
          command: |
            test_build_cardinal_bor=true
            card_bor_producer_version="$CIRCLE_TAG"
            card-bor-blockupdates-version="$CIRCLE_TAG"


            echo "curl call xplugeth-manifest with cardinal-bor Parameters for merge/*** branch in plugeth-bor"
            # curl -X POST https://circleci.com/api/v2/project/github/openrelayxyz/xplugeth-manifest/pipeline --header "Content-Type: application/json" --header "Accept: application/json" --header "Circle-Token: ${CIRCLECI_API_TOKEN}" -d '{ "branch": "circleci-project-setup", "parameters": { "test-build-cardinal-bor": '"$test_build_cardinal_bor"', "card-bor-producer-version": "'"$card_bor_producer_version"'", "card-bor-blockupdates-version": "'"$card_bor_blockupdates_version"'" } }'


workflows:
  version: 2
  test:
    jobs:
      - test:
          filters:
            tags:
              ignore: /^v.*/
  build_and_test:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build_geth_push:
          context: Rivet
          requires:
            - test
          filters:
            tags:
              only: /^v.*/

  build_and_test_and_trigger:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build_geth_push:
          context: Rivet
          requires:
            - test
          filters:
            tags:
              only: /^v.*/
      - trigger-xplugeth-manifest:
            context: Rivet
            requires:
              - build_geth_push
            filters:
              tags:
                only: /^v.*/
              branches:
                only: feature/trigger-xplugeth-maifest
